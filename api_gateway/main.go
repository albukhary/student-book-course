package main

import (
	"context"
	"log"
	"strconv"

	studentpb "github.com/albukhary/student-book-course/student_service/studentpb"

	bookpb "github.com/albukhary/student-book-course/book_service/bookpb"

	coursepb "github.com/albukhary/student-book-course/course_service/coursepb"

	swagger "github.com/arsmn/fiber-swagger/v2"
	"github.com/gofiber/fiber/v2"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/types/known/emptypb"

	// docs are generated by Swag CLI, you have to import them.
	_ "github.com/albukhary/student-book-course/api_gateway/docs"
)

// We need these structs for swagger modeling
type Student struct {
	Id         int
	First_Name string
	Last_Name  string
	Email      string
}

type CreateStudentModel struct {
	First_name string
	Last_name  string
	Email      string
}

type Course struct {
	Course_id  int32
	Instructor string
	Title      string
}

type Book struct {
	Id     int
	Title  string
	Author string
}

type CreateBookModel struct {
	Title  string
	Author string
}

type CreateCourseModel struct {
	Title      string
	Instructor string
}

type Student_Book_Ids struct {
	Book_id    int32
	Student_id int32
}

type Student_Course_Ids struct {
	Course_id  int32
	Student_id int32
}

var studentServiceClient studentpb.StudentServiceClient
var bookServiceClient bookpb.BookServiceClient
var courseServiceClient coursepb.CourseServiceClient

func main() {
	app := fiber.New()

	app.Get("/swagger/*", swagger.Handler)

	setupRoutes(app)

	/*-----------------------------------------------------------------------------------------------*/
	/*-------------------------------Connection for Student Services------------------------------------*/
	/*-----------------------------------------------------------------------------------------------*/
	// Open an INSECURE client connection(cc) with Student Service Server
	studentServiceConnection, err := grpc.Dial("localhost:50051", grpc.WithInsecure())
	if err != nil {
		log.Fatalf("Client Could not connect %v\n", err)
	}
	defer studentServiceConnection.Close()

	// Register our client to that Dialing connection
	studentServiceClient = studentpb.NewStudentServiceClient(studentServiceConnection)

	/*-----------------------------------------------------------------------------------------------*/
	/*-------------------------------Connection for Book Services------------------------------------*/
	/*-----------------------------------------------------------------------------------------------*/
	// Open an INSECURE client connection(cc) with Book Service Server
	bookServiceConnection, err := grpc.Dial("localhost:50052", grpc.WithInsecure())
	if err != nil {
		log.Fatalf("Client Could not connect %v\n", err)
	}
	defer bookServiceConnection.Close()

	// Register our client to that Dialing connection
	bookServiceClient = bookpb.NewBookServiceClient(bookServiceConnection)

	/*-----------------------------------------------------------------------------------------------*/
	/*-------------------------------Connection for Course Services------------------------------------*/
	/*-----------------------------------------------------------------------------------------------*/
	// Open an INSECURE client connection(cc) with Book Service Server
	courseServiceConnection, err := grpc.Dial("localhost:50053", grpc.WithInsecure())
	if err != nil {
		log.Fatalf("Client Could not connect %v\n", err)
	}
	defer courseServiceConnection.Close()

	courseServiceClient = coursepb.NewCourseServiceClient(courseServiceConnection)

	app.Listen(":8084")
}

func setupRoutes(app *fiber.App) {

	app.Get("/", func(c *fiber.Ctx) error {
		return c.SendString("Assalamu alaykum ðŸ‘‹!")
	})
	// Student Related
	app.Post("/create/student", createStudent)
	app.Get("/students", getStudents)
	app.Get("/student/:id", getStudent)
	app.Delete("/delete/student/:id", deleteStudent)
	app.Put("/update/student/:id", updateStudent)

	// Student Book related
	app.Post("/student/borrow/book", borrowBook)
	app.Get("/books/student/:id", getBorrowedBooks)
	app.Delete("/student/handin/book", handInBook)

	// Student Course Related
	app.Post("/student/enroll/course", enrollCourse)
	app.Delete("/student/drop/course", dropCourse)
	app.Get("/courses/student/:id", getEnrolledCourses)

	// Book Service related
	app.Post("/create/book", createBook)
	app.Put("/update/book", updateBook)
	app.Get("/book/:id", getBook)
	app.Get("/books", getAllBooks)
	app.Get("/students/book/:id", getBorrowingStudents)
	app.Delete("/delete/book/:id", deleteBook)

	// Course Service related
	app.Post("/create/course", createCourse)
	app.Put("/update/course", updateCourse)
	app.Get("/course/:id", getCourse)
	app.Get("/courses", getAllCourses)
	app.Get("/students/course/:id", getEnrolledStudents)
	app.Delete("/delete/course/:id", deleteCourse)
}

/*-------------------------------Student Service Handlers------------------------------------*/

// createStudent godoc
// @tags Student Related
// @Summary Creates a student record with user input details and writes into database
// @Accept json
// @Produce json
// @Param details body CreateStudentModel true "Student details"
// @Success 200 {object} Student
// @Router /create/student [post]
func createStudent(c *fiber.Ctx) error {
	var student studentpb.Student

	c.BodyParser(&student)

	// create a request
	req := &studentpb.CreateStudentRequest{
		Student: &student,
	}

	// Invoke gRPC call to the StudentService Server
	res, err := studentServiceClient.CreateStudent(context.Background(), req)
	if err != nil {
		log.Fatalf("Error creating a student from gRPC Student Service Server: %v", err)
	}

	// return it as a JSON
	return c.JSON(res.Student)
}

// getStudents godoc
// @tags Student Related
// @Summary Retrieves the list of all students
// @Produce json
// @Success 200 {object} []Student
// @Router /students [get]
func getStudents(c *fiber.Ctx) error {

	res, err := studentServiceClient.GetAllStudents(context.Background(), &emptypb.Empty{})
	if err != nil {
		log.Fatalf("Error getting all students via gRPC. Error : %v\n", err)
	}

	//return the slice of students to http
	return c.JSON(res.Students)
}

// getStudent godoc
// @tags Student Related
// @Summary Retrieves user based on given ID
// @Produce json
// @Param id path integer true "Student ID"
// @Success 200 {object} Student
// @Router /student/{id} [get]
func getStudent(c *fiber.Ctx) error {
	idParam := c.Params("id")

	// ID is initially a string when we get it from JSON
	// convert into int to use in a query
	id, err := strconv.Atoi(idParam)
	if err != nil {
		log.Fatal(err)
	}

	// Create gRPC request
	req := &studentpb.GetStudentRequest{
		Id: int32(id),
	}

	// Make RPC and get RPC response
	res, err := studentServiceClient.GetStudent(context.Background(), req)
	if err != nil {
		log.Fatalf("Error getting getStudent RPC. Error : %v\n", err)
	}

	// Return the student to REST as JSON
	return c.JSON(res.Student)
}

// deleteStudent godoc
// @tags Student Related
// @Summary Deletes a student with the specified ID
// @Produce json
// @Param id path integer true "Student ID"
// @Success 200 {object} Student
// @Router /delete/student/{id} [delete]
func deleteStudent(c *fiber.Ctx) error {
	idParam := c.Params("id")

	// ID is initially a string when we get it from JSON
	// convert into int to use in a query
	id, err1 := strconv.Atoi(idParam)
	if err1 != nil {
		log.Fatal(err1)
	}

	req := &studentpb.DeleteStudentRequest{
		Id: int32(id),
	}

	res, err := studentServiceClient.DeleteStudent(context.Background(), req)
	if err != nil {
		log.Fatalf("Error getting deleteStudent RPC. Error : %v\n", err)
	}

	return c.JSON(res.Student)
}

// updateStudent godoc
// @tags Student Related
// @Summary Updates a student record with user input details and writes into database
// @Accept json
// @Produce json
// @Param details body Student true "Updated Student Details"
// @Success 200 {object} Student
// @Router /update/student/{id} [put]
func updateStudent(c *fiber.Ctx) error {
	var student studentpb.Student

	// parses JSON to struct
	c.BodyParser(&student)

	req := &studentpb.UpdateStudentRequest{
		Student: &student,
	}

	res, err := studentServiceClient.UpdateStudent(context.Background(), req)
	if err != nil {
		log.Fatalf("Error getting updateStudent RPC. Error : %v\n", err)
	}

	// print the newly updated student details
	return c.JSON(res.Student)
}

// getEnrolledCourses godoc
// @tags Student Course Related
// @Summary Retrieves the enrolled courses of the student based on given ID
// @Produce json
// @Param id path integer true "Student ID"
// @Success 200 {object} []Course
// @Router /courses/student/{id} [get]
func getEnrolledCourses(c *fiber.Ctx) error {
	idParam := c.Params("id")

	// ID is initially a string when we get it from JSON
	// convert into int to use in a query
	id, err1 := strconv.Atoi(idParam)
	if err1 != nil {
		log.Fatal(err1)
	}

	// Create RPC request
	req := &studentpb.GetEnrolledCoursesRequest{
		StudentId: int32(id),
	}

	// Send RPc request and get RPC response
	res, err := studentServiceClient.GetEnrolledCourses(context.Background(), req)
	if err != nil {
		log.Fatalf("Error getting enroller courses RPC. Error : %v\n", err)
	}

	// reutrn coursesto the browser as JSON
	return c.JSON(res.Courses)
}

// getBorrowedBooks godoc
// @tags Student Book Related
// @Summary Retrieves the borrowed books of the student based on given ID
// @Produce json
// @Param id path integer true "Student ID"
// @Success 200 {object} []Book
// @Router /books/student/{id} [get]
func getBorrowedBooks(c *fiber.Ctx) error {
	idParam := c.Params("id")

	// ID is initially a string when we get it from JSON
	// convert into int to use in a query
	id, err1 := strconv.Atoi(idParam)
	if err1 != nil {
		log.Fatal(err1)
	}

	// Create RPC request
	req := &studentpb.GetBorrowedBooksRequest{
		StudentId: int32(id),
	}

	// Send RPc request and get RPC response
	res, err := studentServiceClient.GetBorrowedBooks(context.Background(), req)
	if err != nil {
		log.Fatalf("Error getting borrowed books RPC. Error : %v\n", err)
	}

	// reutrn books to the browser as JSON
	return c.JSON(res.Books)
}

// borrowBook godoc
// @tags Student Book Related
// @Summary Borrows the book of a given Id for a given student ID
// @Accept  json
// @Produce json
// @Param student_book_ids body Student_Book_Ids true "Book and Student IDs"
// @Success 200 {object} Book
// @Router /student/borrow/book [POST]
func borrowBook(c *fiber.Ctx) error {

	var ids Student_Book_Ids
	c.BodyParser(&ids)

	// Prepare a gRPC request
	req := &studentpb.BorrowBookRequest{
		StudentId: ids.Student_id,
		BookId:    ids.Book_id,
	}

	// Make a CAll
	res, err := studentServiceClient.BorrowBook(context.Background(), req)
	if err != nil {
		log.Fatalf("Error from gRPC borrow book call.\n %v\n", err)
	}

	return c.JSON(res.Book)
}

// handInBook godoc
// @tags Student Book Related
// @Summary Hands in the book of a given Id for a given student ID
// @Accept  json
// @Produce json
// @Param student_book_ids body Student_Book_Ids true "Book and Student IDs"
// @Success 200 {object} Book
// @Router /student/handin/book [DELETE]
func handInBook(c *fiber.Ctx) error {
	var student_book_id Student_Book_Ids

	c.BodyParser(&student_book_id)

	req := &studentpb.HandInBookRequest{
		StudentId: student_book_id.Student_id,
		BookId:    student_book_id.Book_id,
	}

	res, err := studentServiceClient.HandInBook(context.Background(), req)
	if err != nil {
		log.Fatalf("Error HandInBook RPC. ERROR : %v\n", err)
	}

	return c.JSON(res.Book)
}

// enrollCourse godoc
// @tags Student Course Related
// @Summary Enrolls the student of the given Id to the given course ID
// @Accept  json
// @Produce json
// @Param student_course_ids body Student_Course_Ids true "Student and Course IDs"
// @Success 200 {object} Course
// @Router /student/enroll/course [POST]
func enrollCourse(c *fiber.Ctx) error {
	var ids Student_Course_Ids
	c.BodyParser(&ids)

	// Prepare a gRPC request
	req := &studentpb.EnrollCourseRequest{
		StudentId: ids.Student_id,
		CourseId:  ids.Course_id,
	}

	// Make a CAll
	res, err := studentServiceClient.EnrollCourse(context.Background(), req)
	if err != nil {
		log.Fatalf("Error from gRPC enroll course call.\n %v\n", err)
	}

	return c.JSON(res.Course)
}

// dropCourse godoc
// @tags Student Course Related
// @Summary Drop the student of the given Id from the given course(ID)
// @Accept  json
// @Produce json
// @Param student_course_ids body Student_Course_Ids true "Student and Course IDs"
// @Success 200 {object} Course
// @Router /student/drop/course [DELETE]
func dropCourse(c *fiber.Ctx) error {
	var student_course_ids Student_Course_Ids

	c.BodyParser(&student_course_ids)

	req := &studentpb.DropCourseRequest{
		StudentId: student_course_ids.Student_id,
		CourseId:  student_course_ids.Course_id,
	}

	res, err := studentServiceClient.DropCourse(context.Background(), req)
	if err != nil {
		log.Fatalf("Error from gRPC DROP course call.\n %v\n", err)
	}

	return c.JSON(res.Course)
}

/*-------------------------------Book Service Handlers------------------------------------*/

// createBook godoc
// @tags Book Related
// @Summary Creates a Book record with user input details and writes into database
// @Accept json
// @Produce json
// @Param details body CreateBookModel true "Book details"
// @Success 200 {object} Book
// @Router /create/book [post]
func createBook(c *fiber.Ctx) error {
	var book bookpb.Book

	c.BodyParser(&book)

	req := &bookpb.CreateBookRequest{
		Book: &book,
	}

	res, err := bookServiceClient.CreateBook(context.Background(), req)
	if err != nil {
		log.Fatalf("Error creating a book from gRPC Book Service Server: %v", err)
	}

	return c.JSON(res.Book)
}

// getBook godoc
// @tags Book Related
// @Summary Gets details of the Book from User input book ID
// @Produce json
// @Param id path integer true "Book ID"
// @Success 200 {object} Book
// @Router /book/{id} [get]
func getBook(c *fiber.Ctx) error {
	idParam := c.Params("id")

	// ID is initially a string when we get it from JSON
	// convert into int to use in a query
	id, err := strconv.Atoi(idParam)
	if err != nil {
		log.Fatal(err)
	}

	// Create gRPC request
	req := &bookpb.GetBookRequest{
		Id: int32(id),
	}

	// Make a call and get gRPC response
	res, err := bookServiceClient.GetBook(context.Background(), req)
	if err != nil {
		log.Fatalf("Error getting getBook RPC. Error : %v\n", err)
	}

	return c.JSON(res.Book)
}

// getAllBooks godoc
// @tags Book Related
// @Summary Gets the list of all the books
// @Produce json
// @Success 200 {object} []Book
// @Router /books [get]
func getAllBooks(c *fiber.Ctx) error {

	// Make a call and get gRPC response
	res, err := bookServiceClient.GetAllBooks(context.Background(), &emptypb.Empty{})
	if err != nil {
		log.Fatalf("Error getting getAllBooks RPC. Error : %v\n", err)
	}

	return c.JSON(res.Books)
}

// updateBook godoc
// @tags Book Related
// @Summary Updates the book record with user input details
// @Accept json
// @Produce json
// @Param details body Book true "Book details"
// @Success 200 {object} Book
// @Router /update/book [put]
func updateBook(c *fiber.Ctx) error {

	var book bookpb.Book

	c.BodyParser(&book)

	req := &bookpb.UpdateBookRequest{
		Book: &book,
	}

	// Make a call and get gRPC response
	res, err := bookServiceClient.UpdateBook(context.Background(), req)
	if err != nil {
		log.Fatalf("Error updateBook RPC. Error : %v\n", err)
	}

	return c.JSON(res.Book)
}

// deleteBook godoc
// @tags Book Related
// @Summary Deletes the book with the given ID
// @Produce json
// @Param id path integer true "Book ID"
// @Success 200 {object} Book
// @Router /delete/book/{id} [delete]
func deleteBook(c *fiber.Ctx) error {
	idParam := c.Params("id")

	// ID is initially a string when we get it from JSON
	// convert into int to use in a query
	id, err := strconv.Atoi(idParam)
	if err != nil {
		log.Fatal(err)
	}

	// Create gRPC request
	req := &bookpb.DeleteBookRequest{
		Id: int32(id),
	}

	// Make a call and get gRPC response
	res, err := bookServiceClient.DeleteBook(context.Background(), req)
	if err != nil {
		log.Fatalf("Error calling deleteBook RPC. Error : %v\n", err)
	}

	return c.JSON(res.Book)
}

// getBorrowingStudents godoc
// @tags Book Related
// @Summary Gets the list of all students who borrowed a particular book
// @Produce json
// @Param id path integer true "Book ID"
// @Success 200 {object} []Student
// @Router /students/book/{id} [get]
func getBorrowingStudents(c *fiber.Ctx) error {
	idParam := c.Params("id")

	// ID is initially a string when we get it from JSON
	// convert into int to use in a query
	id, err := strconv.Atoi(idParam)
	if err != nil {
		log.Fatal(err)
	}

	// Create gRPC request
	req := &bookpb.GetBorrowingStudentsRequest{
		BookId: int32(id),
	}

	// Make a call and get gRPC response
	res, err := bookServiceClient.GetBorrowingStudents(context.Background(), req)
	if err != nil {
		log.Fatalf("Error calling getBorrowingStudents RPC.\n Error : %v\n", err)
	}

	return c.JSON(res.Students)
}

/*-------------------------------Course Service Handlers------------------------------------*/

// createCourse godoc
// @tags Course Related
// @Summary Creates a Course record with user input details and writes into database
// @Accept json
// @Produce json
// @Param details body CreateCourseModel true "Course details"
// @Success 200 {object} Course
// @Router /create/course [post]
func createCourse(c *fiber.Ctx) error {
	var course coursepb.Course

	c.BodyParser(&course)

	req := &coursepb.CreateCourseRequest{
		Course: &course,
	}

	res, err := courseServiceClient.CreateCourse(context.Background(), req)
	if err != nil {
		log.Fatalf("Error creating a course from gRPC Book Service Server: %v", err)
	}

	return c.JSON(res.Course)
}

// getCourse godoc
// @tags Course Related
// @Summary Gets details of the Course from User input book ID
// @Produce json
// @Param id path integer true "Course ID"
// @Success 200 {object} Course
// @Router /course/{id} [get]
func getCourse(c *fiber.Ctx) error {
	idParam := c.Params("id")

	// ID is initially a string when we get it from JSON
	// convert into int to use in a query
	id, err := strconv.Atoi(idParam)
	if err != nil {
		log.Fatal(err)
	}

	// Create gRPC request
	req := &coursepb.GetCourseRequest{
		Id: int32(id),
	}

	// Make a call and get gRPC response
	res, err := courseServiceClient.GetCourse(context.Background(), req)
	if err != nil {
		log.Fatalf("Error calling getCourse RPC. Error : %v\n", err)
	}

	return c.JSON(res.Course)
}

// getAllCourses godoc
// @tags Course Related
// @Summary Gets the list of all the courses
// @Produce json
// @Success 200 {object} []Course
// @Router /courses [get]
func getAllCourses(c *fiber.Ctx) error {

	// Make a call and get gRPC response
	res, err := courseServiceClient.GetAllCourses(context.Background(), &emptypb.Empty{})
	if err != nil {
		log.Fatalf("Error calling getAllCourses RPC. Error : %v\n", err)
	}

	return c.JSON(res.Courses)
}

// updateCourse godoc
// @tags Course Related
// @Summary Updates the course record with user input details
// @Accept json
// @Produce json
// @Param details body Course true "Course details"
// @Success 200 {object} Course
// @Router /update/course [put]
func updateCourse(c *fiber.Ctx) error {

	var course coursepb.Course

	c.BodyParser(&course)

	req := &coursepb.UpdateCourseRequest{
		Course: &course,
	}

	// Make a call and get gRPC response
	res, err := courseServiceClient.UpdateCourse(context.Background(), req)
	if err != nil {
		log.Fatalf("Error updateCourse RPC. Error : %v\n", err)
	}

	return c.JSON(res.Course)
}

// deleteCourse godoc
// @tags Course Related
// @Summary Deletes the course with the given ID
// @Produce json
// @Param id path integer true "Course ID"
// @Success 200 {object} Course
// @Router /delete/course/{id} [delete]
func deleteCourse(c *fiber.Ctx) error {
	idParam := c.Params("id")

	// ID is initially a string when we get it from JSON
	// convert into int to use in a query
	id, err := strconv.Atoi(idParam)
	if err != nil {
		log.Fatal(err)
	}

	// Create gRPC request
	req := &coursepb.DeleteCourseRequest{
		Id: int32(id),
	}

	// Make a call and get gRPC response
	res, err := courseServiceClient.DeleteCourse(context.Background(), req)
	if err != nil {
		log.Fatalf("Error calling deleteCourse RPC. Error : %v\n", err)
	}

	return c.JSON(res.Course)
}

// getEnrolledStudents godoc
// @tags Course Related
// @Summary Gets the list of all students who are enrolled to a particular course
// @Produce json
// @Param id path integer true "Course ID"
// @Success 200 {object} []Student
// @Router /students/course/{id} [get]
func getEnrolledStudents(c *fiber.Ctx) error {
	idParam := c.Params("id")

	// ID is initially a string when we get it from JSON
	// convert into int to use in a query
	id, err := strconv.Atoi(idParam)
	if err != nil {
		log.Fatal(err)
	}

	// Create gRPC request
	req := &coursepb.GetEnrolledStudentsRequest{
		CourseId: int32(id),
	}

	// Make a call and get gRPC response
	res, err := courseServiceClient.GetEnrolledStudents(context.Background(), req)
	if err != nil {
		log.Fatalf("Error calling getEnrolledStudents RPC.\n Error : %v\n", err)
	}

	return c.JSON(res.Students)
}
