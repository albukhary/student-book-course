package handlers

import (
	"context"
	"log"
	"strconv"

	studentpb "github.com/albukhary/student-book-course/student_service/studentpb"

	"github.com/albukhary/student-book-course/api_gateway/model"

	"github.com/albukhary/student-book-course/api_gateway/clients"

	"github.com/gofiber/fiber/v2"

	"google.golang.org/protobuf/types/known/emptypb"

	// docs are generated by Swag CLI, you have to import them.
	_ "github.com/albukhary/student-book-course/api_gateway/docs"
)

/*-------------------------------Student Service Handlers------------------------------------*/

// CreateStudent godoc
// @tags Student Related
// @Summary Creates a student record with user input details and writes into database
// @Accept json
// @Produce json
// @Param details body model.CreateStudentModel true "Student details"
// @Success 200 {object} model.Student
// @Router /create/student [post]
func CreateStudent(c *fiber.Ctx) error {
	var student studentpb.Student

	c.BodyParser(&student)

	// create a request
	req := &studentpb.CreateStudentRequest{
		Student: &student,
	}

	// Invoke gRPC call to the StudentService Server
	res, err := clients.StudentServiceClient.CreateStudent(context.Background(), req)
	if err != nil {
		log.Fatalf("Error creating a student from gRPC Student Service Server: %v", err)
	}

	// return it as a JSON
	return c.JSON(res.Student)
}

// GetStudents godoc
// @tags Student Related
// @Summary Retrieves the list of all students
// @Produce json
// @Success 200 {object} []model.Student
// @Router /students [get]
func GetStudents(c *fiber.Ctx) error {

	res, err := clients.StudentServiceClient.GetAllStudents(context.Background(), &emptypb.Empty{})
	if err != nil {
		log.Fatalf("Error getting all students via gRPC. Error : %v\n", err)
	}

	//return the slice of students to http
	return c.JSON(res.Students)
}

// GetStudent godoc
// @tags Student Related
// @Summary Retrieves user based on given ID
// @Produce json
// @Param id path integer true "Student ID"
// @Success 200 {object} model.Student
// @Router /student/{id} [get]
func GetStudent(c *fiber.Ctx) error {
	idParam := c.Params("id")

	// ID is initially a string when we get it from JSON
	// convert into int to use in a query
	id, err := strconv.Atoi(idParam)
	if err != nil {
		log.Fatal(err)
	}

	// Create gRPC request
	req := &studentpb.GetStudentRequest{
		Id: int32(id),
	}

	// Make RPC and get RPC response
	res, err := clients.StudentServiceClient.GetStudent(context.Background(), req)
	if err != nil {
		log.Fatalf("Error getting getStudent RPC. Error : %v\n", err)
	}

	// Return the student to REST as JSON
	return c.JSON(res.Student)
}

// DeleteStudent godoc
// @tags Student Related
// @Summary Deletes a student with the specified ID
// @Produce json
// @Param id path integer true "Student ID"
// @Success 200 {object} model.Student
// @Router /delete/student/{id} [delete]
func DeleteStudent(c *fiber.Ctx) error {
	idParam := c.Params("id")

	// ID is initially a string when we get it from JSON
	// convert into int to use in a query
	id, err1 := strconv.Atoi(idParam)
	if err1 != nil {
		log.Fatal(err1)
	}

	req := &studentpb.DeleteStudentRequest{
		Id: int32(id),
	}

	res, err := clients.StudentServiceClient.DeleteStudent(context.Background(), req)
	if err != nil {
		log.Fatalf("Error getting deleteStudent RPC. Error : %v\n", err)
	}

	return c.JSON(res.Student)
}

// UpdateStudent godoc
// @tags Student Related
// @Summary Updates a student record with user input details and writes into database
// @Accept json
// @Produce json
// @Param details body model.Student true "Updated Student Details"
// @Success 200 {object} model.Student
// @Router /update/student/{id} [put]
func UpdateStudent(c *fiber.Ctx) error {
	var student studentpb.Student

	// parses JSON to struct
	c.BodyParser(&student)

	req := &studentpb.UpdateStudentRequest{
		Student: &student,
	}

	res, err := clients.StudentServiceClient.UpdateStudent(context.Background(), req)
	if err != nil {
		log.Fatalf("Error getting updateStudent RPC. Error : %v\n", err)
	}

	// print the newly updated student details
	return c.JSON(res.Student)
}

// GetEnrolledCourses godoc
// @tags Student Course Related
// @Summary Retrieves the enrolled courses of the student based on given ID
// @Produce json
// @Param id path integer true "Student ID"
// @Success 200 {object} []model.Course
// @Router /courses/student/{id} [get]
func GetEnrolledCourses(c *fiber.Ctx) error {
	idParam := c.Params("id")

	// ID is initially a string when we get it from JSON
	// convert into int to use in a query
	id, err1 := strconv.Atoi(idParam)
	if err1 != nil {
		log.Fatal(err1)
	}

	// Create RPC request
	req := &studentpb.GetEnrolledCoursesRequest{
		StudentId: int32(id),
	}

	// Send RPc request and get RPC response
	res, err := clients.StudentServiceClient.GetEnrolledCourses(context.Background(), req)
	if err != nil {
		log.Fatalf("Error getting enroller courses RPC. Error : %v\n", err)
	}

	// reutrn coursesto the browser as JSON
	return c.JSON(res.Courses)
}

// GetBorrowedBooks godoc
// @tags Student Book Related
// @Summary Retrieves the borrowed books of the student based on given ID
// @Produce json
// @Param id path integer true "Student ID"
// @Success 200 {object} []model.Book
// @Router /books/student/{id} [get]
func GetBorrowedBooks(c *fiber.Ctx) error {
	idParam := c.Params("id")

	// ID is initially a string when we get it from JSON
	// convert into int to use in a query
	id, err1 := strconv.Atoi(idParam)
	if err1 != nil {
		log.Fatal(err1)
	}

	// Create RPC request
	req := &studentpb.GetBorrowedBooksRequest{
		StudentId: int32(id),
	}

	// Send RPc request and get RPC response
	res, err := clients.StudentServiceClient.GetBorrowedBooks(context.Background(), req)
	if err != nil {
		log.Fatalf("Error getting borrowed books RPC. Error : %v\n", err)
	}

	// reutrn books to the browser as JSON
	return c.JSON(res.Books)
}

// BorrowBook godoc
// @tags Student Book Related
// @Summary Borrows the book of a given Id for a given student ID
// @Accept  json
// @Produce json
// @Param student_book_ids body model.Student_Book_Ids true "Book and Student IDs"
// @Success 200 {object} model.Book
// @Router /student/borrow/book [POST]
func BorrowBook(c *fiber.Ctx) error {

	var ids model.Student_Book_Ids
	c.BodyParser(&ids)

	// Prepare a gRPC request
	req := &studentpb.BorrowBookRequest{
		StudentId: ids.Student_id,
		BookId:    ids.Book_id,
	}

	// Make a CAll
	res, err := clients.StudentServiceClient.BorrowBook(context.Background(), req)
	if err != nil {
		log.Fatalf("Error from gRPC borrow book call.\n %v\n", err)
	}

	return c.JSON(res.Book)
}

// HandInBook godoc
// @tags Student Book Related
// @Summary Hands in the book of a given Id for a given student ID
// @Accept  json
// @Produce json
// @Param student_book_ids body model.Student_Book_Ids true "Book and Student IDs"
// @Success 200 {object} model.Book
// @Router /student/handin/book [DELETE]
func HandInBook(c *fiber.Ctx) error {
	var student_book_id model.Student_Book_Ids

	c.BodyParser(&student_book_id)

	req := &studentpb.HandInBookRequest{
		StudentId: student_book_id.Student_id,
		BookId:    student_book_id.Book_id,
	}

	res, err := clients.StudentServiceClient.HandInBook(context.Background(), req)
	if err != nil {
		log.Fatalf("Error HandInBook RPC. ERROR : %v\n", err)
	}

	return c.JSON(res.Book)
}

// EnrollCourse godoc
// @tags Student Course Related
// @Summary Enrolls the student of the given Id to the given course ID
// @Accept  json
// @Produce json
// @Param student_course_ids body model.Student_Course_Ids true "Student and Course IDs"
// @Success 200 {object} model.Course
// @Router /student/enroll/course [POST]
func EnrollCourse(c *fiber.Ctx) error {
	var ids model.Student_Course_Ids
	c.BodyParser(&ids)

	// Prepare a gRPC request
	req := &studentpb.EnrollCourseRequest{
		StudentId: ids.Student_id,
		CourseId:  ids.Course_id,
	}

	// Make a CAll
	res, err := clients.StudentServiceClient.EnrollCourse(context.Background(), req)
	if err != nil {
		log.Fatalf("Error from gRPC enroll course call.\n %v\n", err)
	}

	return c.JSON(res.Course)
}

// DropCourse godoc
// @tags Student Course Related
// @Summary Drop the student of the given Id from the given course(ID)
// @Accept  json
// @Produce json
// @Param student_course_ids body model.Student_Course_Ids true "Student and Course IDs"
// @Success 200 {object} model.Course
// @Router /student/drop/course [DELETE]
func DropCourse(c *fiber.Ctx) error {
	var student_course_ids model.Student_Course_Ids

	c.BodyParser(&student_course_ids)

	req := &studentpb.DropCourseRequest{
		StudentId: student_course_ids.Student_id,
		CourseId:  student_course_ids.Course_id,
	}

	res, err := clients.StudentServiceClient.DropCourse(context.Background(), req)
	if err != nil {
		log.Fatalf("Error from gRPC DROP course call.\n %v\n", err)
	}

	return c.JSON(res.Course)
}
