package handlers

import (
	"context"
	"log"
	"strconv"

	bookpb "github.com/albukhary/student-book-course/book_service/bookpb"

	"github.com/albukhary/student-book-course/api_gateway/clients"

	_ "github.com/albukhary/student-book-course/api_gateway/model"

	"github.com/gofiber/fiber/v2"

	"google.golang.org/protobuf/types/known/emptypb"

	// docs are generated by Swag CLI, you have to import them.
	_ "github.com/albukhary/student-book-course/api_gateway/docs"
)

/*-------------------------------Book Service Handlers------------------------------------*/

// CreateBook godoc
// @tags Book Related
// @Summary Creates a Book record with user input details and writes into database
// @Accept json
// @Produce json
// @Param details body model.CreateBookModel true "Book details"
// @Success 200 {object} model.Book
// @Router /create/book [post]
func CreateBook(c *fiber.Ctx) error {
	var book bookpb.Book

	c.BodyParser(&book)

	req := &bookpb.CreateBookRequest{
		Book: &book,
	}

	res, err := clients.BookServiceClient.CreateBook(context.Background(), req)
	if err != nil {
		log.Fatalf("Error creating a book from gRPC Book Service Server: %v", err)
	}

	return c.JSON(res.Book)
}

// GetBook godoc
// @tags Book Related
// @Summary Gets details of the Book from User input book ID
// @Produce json
// @Param id path integer true "Book ID"
// @Success 200 {object} model.Book
// @Router /book/{id} [get]
func GetBook(c *fiber.Ctx) error {
	idParam := c.Params("id")

	// ID is initially a string when we get it from JSON
	// convert into int to use in a query
	id, err := strconv.Atoi(idParam)
	if err != nil {
		log.Fatal(err)
	}

	// Create gRPC request
	req := &bookpb.GetBookRequest{
		Id: int32(id),
	}

	// Make a call and get gRPC response
	res, err := clients.BookServiceClient.GetBook(context.Background(), req)
	if err != nil {
		log.Fatalf("Error getting getBook RPC. Error : %v\n", err)
	}

	return c.JSON(res.Book)
}

// GetAllBooks godoc
// @tags Book Related
// @Summary Gets the list of all the books
// @Produce json
// @Success 200 {object} []model.Book
// @Router /books [get]
func GetAllBooks(c *fiber.Ctx) error {

	// Make a call and get gRPC response
	res, err := clients.BookServiceClient.GetAllBooks(context.Background(), &emptypb.Empty{})
	if err != nil {
		log.Fatalf("Error getting getAllBooks RPC. Error : %v\n", err)
	}

	return c.JSON(res.Books)
}

// UpdateBook godoc
// @tags Book Related
// @Summary Updates the book record with user input details
// @Accept json
// @Produce json
// @Param details body model.Book true "Book details"
// @Success 200 {object} model.Book
// @Router /update/book [put]
func UpdateBook(c *fiber.Ctx) error {

	var book bookpb.Book

	c.BodyParser(&book)

	req := &bookpb.UpdateBookRequest{
		Book: &book,
	}

	// Make a call and get gRPC response
	res, err := clients.BookServiceClient.UpdateBook(context.Background(), req)
	if err != nil {
		log.Fatalf("Error updateBook RPC. Error : %v\n", err)
	}

	return c.JSON(res.Book)
}

// DeleteBook godoc
// @tags Book Related
// @Summary Deletes the book with the given ID
// @Produce json
// @Param id path integer true "Book ID"
// @Success 200 {object} model.Book
// @Router /delete/book/{id} [delete]
func DeleteBook(c *fiber.Ctx) error {
	idParam := c.Params("id")

	// ID is initially a string when we get it from JSON
	// convert into int to use in a query
	id, err := strconv.Atoi(idParam)
	if err != nil {
		log.Fatal(err)
	}

	// Create gRPC request
	req := &bookpb.DeleteBookRequest{
		Id: int32(id),
	}

	// Make a call and get gRPC response
	res, err := clients.BookServiceClient.DeleteBook(context.Background(), req)
	if err != nil {
		log.Fatalf("Error calling deleteBook RPC. Error : %v\n", err)
	}

	return c.JSON(res.Book)
}

// GetBorrowingStudents godoc
// @tags Book Related
// @Summary Gets the list of all students who borrowed a particular book
// @Produce json
// @Param id path integer true "Book ID"
// @Success 200 {object} []model.Student
// @Router /students/book/{id} [get]
func GetBorrowingStudents(c *fiber.Ctx) error {
	idParam := c.Params("id")

	// ID is initially a string when we get it from JSON
	// convert into int to use in a query
	id, err := strconv.Atoi(idParam)
	if err != nil {
		log.Fatal(err)
	}

	// Create gRPC request
	req := &bookpb.GetBorrowingStudentsRequest{
		BookId: int32(id),
	}

	// Make a call and get gRPC response
	res, err := clients.BookServiceClient.GetBorrowingStudents(context.Background(), req)
	if err != nil {
		log.Fatalf("Error calling getBorrowingStudents RPC.\n Error : %v\n", err)
	}

	return c.JSON(res.Students)
}
